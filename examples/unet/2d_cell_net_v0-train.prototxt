name: '2d_cell_net_v0'
force_backward: true

layer { top: 'data' top: 'labels' top: 'weights' top: 'weights2' name: 'loaddata' type: 'HDF5Data' hdf5_data_param { source: 'input_files.txt' batch_size: 1 shuffle: false } include: { phase: TRAIN } }

layer { bottom: 'weights2' top: 'def' name: 'create_deformation' type: 'CreateDeformation'
  create_deformation_param {
    batch_size: 1 ny: 540 nx: 540 ncomponents: 2
    random_elastic_grid_spacing     { v: 150 v: 150 }
    random_elastic_deform_magnitude { v: 10 v: 10 }
    random_offset_range_from_pdf:   true
    random_offset_from              { v: -8  v: -8 }
    random_offset_to                { v: 8 v: 8 }
    random_rotate_from              { v: 0   }
    random_rotate_to                { v: 360 }
  } include: { phase: TRAIN }
}

layer { bottom: 'data'  bottom: 'def' top: 'data2' name: 'def_data-data2'    type: 'ApplyDeformation'  apply_deformation_param { interpolation: 'linear' extrapolation: 'mirror' } include: { phase: TRAIN } }
layer { bottom: 'data2'               top: 'data3' name: 'augm_data2-data3'  type: 'ValueAugmentation'  value_augmentation_param { black_from: -0.05 black_to: 0.05 slope_min: 0.8 slope_max: 1.2 white_from: 0.95 white_to: 1.05 } include: { phase: TRAIN } }

layer { bottom: 'data3'               top: 'd0a'   name: 'trafo_data3-d0a'   type: 'ValueTransformation'                                                                  value_transformation_param { offset { v: -0.5 } } }

layer { bottom: 'd0a'                 top: 'd0b'   name: 'conv_d0a-b'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 64 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd0b'                 top: 'd0b'   name: 'relu_d0b'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd0b'                 top: 'd0c'   name: 'conv_d0b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 64 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd0c'                 top: 'd0c'   name: 'relu_d0c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd0c'                 top: 'd1a'   name: 'pool_d0c-1a'       type: 'Pooling'                                                                              pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { bottom: 'd1a'                 top: 'd1b'   name: 'conv_d1a-b'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd1b'                 top: 'd1b'   name: 'relu_d1b'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd1b'                 top: 'd1c'   name: 'conv_d1b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd1c'                 top: 'd1c'   name: 'relu_d1c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd1c'                 top: 'd2a'   name: 'pool_d1c-2a'       type: 'Pooling'                                                                              pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { bottom: 'd2a'                 top: 'd2b'   name: 'conv_d2a-b'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 256 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd2b'                 top: 'd2b'   name: 'relu_d2b'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd2b'                 top: 'd2c'   name: 'conv_d2b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 256 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd2c'                 top: 'd2c'   name: 'relu_d2c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd2c'                 top: 'd3a'   name: 'pool_d2c-3a'       type: 'Pooling'                                                                              pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { bottom: 'd3a'                 top: 'd3b'   name: 'conv_d3a-b'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 512 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd3b'                 top: 'd3b'   name: 'relu_d3b'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd3b'                 top: 'd3c'   name: 'conv_d3b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 512 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd3c'                 top: 'd3c'   name: 'relu_d3c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd3c'                 top: 'd3c'   name: 'dropout_d3c'       type: 'Dropout'                                                                              dropout_param { dropout_ratio: 0.5 } include: { phase: TRAIN } }
layer { bottom: 'd3c'                 top: 'd4a'   name: 'pool_d3c-4a'       type: 'Pooling'                                                                              pooling_param { pool: MAX kernel_size: 2 stride: 2 } }

layer { bottom: 'd4a'                 top: 'd4b'   name: 'conv_d4a-b'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 1024 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd4b'                 top: 'd4b'   name: 'relu_d4b'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd4b'                 top: 'd4c'   name: 'conv_d4b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 1024 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'd4c'                 top: 'd4c'   name: 'relu_d4c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'd4c'                 top: 'd4c'   name: 'dropout_d4c'       type: 'Dropout'                                                                              dropout_param { dropout_ratio: 0.5 } include: { phase: TRAIN } }
layer { bottom: 'd4c'                 top: 'u3a'   name: 'upconv_d4c_u3a'    type: 'Deconvolution' param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 512 pad: 0 kernel_size: 2 stride: 2 weight_filler { type: 'msra' } } }

layer { bottom: 'u3a'                 top: 'u3a'   name: 'relu_u3a'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u3a'   bottom: 'd3c' top: 'u3b'   name: 'concat_d3c_u3a-b'  type: 'Concat' }
layer { bottom: 'u3b'                 top: 'u3c'   name: 'conv_u3b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 512 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u3c'                 top: 'u3c'   name: 'relu_u3c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u3c'                 top: 'u3d'   name: 'conv_u3c-d'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 512 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u3d'                 top: 'u3d'   name: 'relu_u3d'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u3d'                 top: 'u2a'   name: 'upconv_u3d_u2a'    type: 'Deconvolution' param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 256 pad: 0 kernel_size: 2 stride: 2 weight_filler { type: 'msra' } } }

layer { bottom: 'u2a'                 top: 'u2a'   name: 'relu_u2a'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u2a'   bottom: 'd2c' top: 'u2b'   name: 'concat_d2c_u2a-b'  type: 'Concat' }
layer { bottom: 'u2b'                 top: 'u2c'   name: 'conv_u2b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 256 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u2c'                 top: 'u2c'   name: 'relu_u2c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u2c'                 top: 'u2d'   name: 'conv_u2c-d'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 256 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u2d'                 top: 'u2d'   name: 'relu_u2d'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u2d'                 top: 'u1a'   name: 'upconv_u2d_u1a'    type: 'Deconvolution' param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 2 stride: 2 weight_filler { type: 'msra' } } }

layer { bottom: 'u1a'                 top: 'u1a'   name: 'relu_u1a'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u1a'   bottom: 'd1c' top: 'u1b'   name: 'concat_d1c_u1a-b'  type: 'Concat' }
layer { bottom: 'u1b'                 top: 'u1c'   name: 'conv_u1b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u1c'                 top: 'u1c'   name: 'relu_u1c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u1c'                 top: 'u1d'   name: 'conv_u1c-d'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u1d'                 top: 'u1d'   name: 'relu_u1d'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u1d'                 top: 'u0a'   name: 'upconv_u1d_u0a'    type: 'Deconvolution' param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 2 stride: 2 weight_filler { type: 'msra' } } }

layer { bottom: 'u0a'                 top: 'u0a'   name: 'relu_u0a'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u0a'   bottom: 'd0c' top: 'u0b'   name: 'concat_d0c_u0a-b'  type: 'Concat' }
layer { bottom: 'u0b'                 top: 'u0c'   name: 'conv_u0b-c'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u0c'                 top: 'u0c'   name: 'relu_u0c'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u0c'                 top: 'u0d'   name: 'conv_u0c-d'        type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 128 pad: 0 kernel_size: 3 weight_filler { type: 'msra' } } }
layer { bottom: 'u0d'                 top: 'u0d'   name: 'relu_u0d'          type: 'ReLU'                                                                                 relu_param { negative_slope: 0.1 } }
layer { bottom: 'u0d'                 top: 'score' name: 'conv_u0d-score'    type: 'Convolution'   param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0 }  convolution_param { num_output: 2 pad: 0 kernel_size: 1 weight_filler { type: 'msra' } } }

layer { bottom: 'labels' bottom: 'def' top: 'labelcrop'  name: 'def_label-crop'   type: 'ApplyDeformation'  apply_deformation_param { interpolation: 'nearest' extrapolation: 'mirror' output_shape_from: 'score'} include: { phase: TRAIN } }
layer { bottom: 'weights' bottom: 'def' top: 'weightcrop'  name: 'def_weight-crop'   type: 'ApplyDeformation'  apply_deformation_param { interpolation: 'linear' extrapolation: 'mirror' output_shape_from: 'score'} include: { phase: TRAIN } }
layer { bottom: 'score' bottom: 'labelcrop' bottom: 'weightcrop' top: 'loss'  name: 'loss'   type: 'SoftmaxWithLoss' include: { phase: TRAIN } }
